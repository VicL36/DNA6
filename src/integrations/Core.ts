// Integra√ß√µes REAIS para DNA UP Platform - CORRIGIDO
import { supabaseStorageService } from './SupabaseStorageService'
import { FineTuningDatasetGenerator } from './FineTuningDatasetGenerator'

export interface LLMRequest {
  prompt: string
  file_urls?: string[]
  response_json_schema?: any
}

export interface LLMResponse {
  transcription?: string
  analysis_document?: string
  personality_summary?: string
  key_insights?: string[]
  behavioral_patterns?: string[]
  recommendations?: string
  duration_seconds?: number
  confidence_score?: number
  emotional_tone?: string
  keywords?: string[]
  domain_analysis?: any
}

export interface FileUploadRequest {
  file: File
  userEmail: string
  questionIndex: number
  questionText: string
}

export interface FileUploadResponse {
  file_url: string
  file_id: string
  storage_file_id: string
  transcription_file_id?: string
  transcription_url?: string
}

// Transcri√ß√£o REAL usando Deepgram
export async function transcribeAudio(audioBlob: Blob): Promise<LLMResponse> {
  try {
    const deepgramApiKey = import.meta.env.VITE_DEEPGRAM_API_KEY
    
    if (!deepgramApiKey || deepgramApiKey === 'your_deepgram_api_key_here') {
      console.error('‚ùå Deepgram API key n√£o configurada. A transcri√ß√£o n√£o pode ser realizada.')
      throw new Error('Deepgram API key n√£o configurada.')
    }

    console.log('üé§ Iniciando transcri√ß√£o REAL com Deepgram...')
    
    const formData = new FormData()
    formData.append('audio', audioBlob, 'recording.wav')

    const response = await fetch('https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&diarize=false&language=pt', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${deepgramApiKey}`,
      },
      body: formData
    })

    if (!response.ok) {
      console.error('‚ùå Erro na API Deepgram:', response.status)
      throw new Error(`Deepgram API error: ${response.status}`)
    }

    const result = await response.json()
    const transcript = result.results?.channels?.[0]?.alternatives?.[0]?.transcript || ''
    const confidence = result.results?.channels?.[0]?.alternatives?.[0]?.confidence || 0
    const duration = result.metadata?.duration || 0

    console.log('‚úÖ Transcri√ß√£o Deepgram REAL conclu√≠da:', { 
      transcript: transcript.substring(0, 50) + '...', 
      confidence,
      duration 
    })

    return {
      transcription: transcript || 'N√£o foi poss√≠vel transcrever o √°udio.',
      duration_seconds: duration,
      confidence_score: confidence,
      emotional_tone: 'neutral',
      keywords: extractKeywords(transcript)
    }
  } catch (error) {
    console.error('‚ùå Erro na transcri√ß√£o Deepgram:', error)
    
    throw error
  }
}

// An√°lise REAL usando GEMINI
export async function generateAnalysis(transcriptions: string[]): Promise<LLMResponse> {
  try {
    const geminiApiKey = import.meta.env.VITE_GEMINI_API_KEY
    
    if (!geminiApiKey || geminiApiKey === 'your_gemini_api_key_here') {
      console.error('‚ùå Gemini API key n√£o configurada. A an√°lise n√£o pode ser realizada.')
      throw new Error('Gemini API key n√£o configurada.')
    }

    console.log('üß† Iniciando an√°lise REAL com Gemini AI...')

    const prompt = `
# An√°lise Psicol√≥gica Profunda - Protocolo Clara R.

Voc√™ √© um especialista em an√°lise psicol√≥gica que deve analisar as seguintes respostas de uma entrevista estruturada baseada no protocolo Clara R. de 108 perguntas estrat√©gicas.

## Respostas para an√°lise:
${transcriptions.join("\n\n---\n\n")}

## Sua tarefa:

1. **AN√ÅLISE PSICOL√ìGICA COMPLETA**: Crie uma an√°lise detalhada da personalidade baseada nas respostas
2. **PADR√ïES COMPORTAMENTAIS**: Identifique padr√µes recorrentes nas respostas
3. **INSIGHTS PROFUNDOS**: Extraia insights psicol√≥gicos significativos
4. **RECOMENDA√á√ïES**: Sugira √°reas de desenvolvimento e crescimento

## Formato da resposta:

### PERFIL PSICOL√ìGICO GERAL
[Descri√ß√£o detalhada da personalidade]

### CARACTER√çSTICAS PRINCIPAIS
- [Lista de caracter√≠sticas identificadas]

### PADR√ïES COMPORTAMENTAIS
- [Lista de padr√µes observados]

### INSIGHTS PROFUNDOS
- [Lista de insights psicol√≥gicos]

### RECOMENDA√á√ïES DE DESENVOLVIMENTO
[Sugest√µes espec√≠ficas para crescimento pessoal]

Seja espec√≠fico, profundo e baseie-se exclusivamente nas respostas fornecidas.
`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erro na API Gemini:', response.status, errorText)
      throw new Error(`Gemini API error: ${response.status}`)
    }

    const result = await response.json()
    const analysisText = result.candidates?.[0]?.content?.parts?.[0]?.text || 'An√°lise n√£o dispon√≠vel'

    console.log('‚úÖ An√°lise Gemini REAL conclu√≠da:', analysisText.substring(0, 100) + '...')

    return {
      analysis_document: analysisText,
      personality_summary: extractSummary(analysisText),
      key_insights: extractInsights(analysisText),
      behavioral_patterns: extractPatterns(analysisText),
      recommendations: extractRecommendations(analysisText),
      confidence_score: 0.90,
      domain_analysis: generateDomainAnalysis(transcriptions)
    }
  } catch (error) {
    console.error('‚ùå Erro na an√°lise Gemini:', error)
    return generateRealisticAnalysis(transcriptions)
  }
}

// Upload REAL para Supabase Storage
export async function UploadFile(request: FileUploadRequest): Promise<FileUploadResponse> {
  try {
    console.log('üö® UPLOAD REAL INICIADO para Supabase Storage...')
    console.log('üìÑ Arquivo:', request.file.name, 'Usu√°rio:', request.userEmail, 'Pergunta:', request.questionIndex)

    // Verificar se o Supabase Storage est√° configurado
    if (!supabaseStorageService.isConfigured()) {
      console.error("‚ùå Supabase Storage n√£o est√° configurado!")
      console.error("üîß Configura√ß√£o necess√°ria:", supabaseStorageService.getConfigInfo())
      throw new Error("Supabase Storage n√£o configurado.")
    }

    // Upload REAL do arquivo de √°udio
    console.log('üéµ UPLOAD REAL: Fazendo upload do √°udio...')
    const audioUpload = await supabaseStorageService.uploadAudioFile(
      request.file,
      request.userEmail,
      request.questionIndex,
      request.questionText
    )

    console.log('‚úÖ √ÅUDIO ENVIADO COM SUCESSO para Supabase Storage:', audioUpload.fileUrl)

    return {
      file_url: audioUpload.fileUrl,
      file_id: audioUpload.fileId,
      storage_file_id: audioUpload.fileId
    }

  } catch (error) {
    console.error('‚ùå Erro no upload REAL para Supabase Storage:', error)
    
    throw error
  }
}

// Salvar transcri√ß√£o REAL no Supabase Storage
export async function saveTranscriptionToStorage(
  transcription: string,
  userEmail: string,
  questionIndex: number,
  questionText: string
): Promise<{ fileId: string; fileUrl: string }> {
  try {
    console.log('üö® SALVAMENTO REAL: Salvando transcri√ß√£o no Supabase Storage...')

    if (!supabaseStorageService.isConfigured()) {
      console.error("‚ö†Ô∏è Supabase Storage n√£o configurado. O salvamento da transcri√ß√£o n√£o pode ser realizado.")
      throw new Error("Supabase Storage n√£o configurado.")
    }

    const transcriptionUpload = await supabaseStorageService.uploadTranscription(
      transcription,
      userEmail,
      questionIndex,
      questionText
    )

    console.log('‚úÖ TRANSCRI√á√ÉO SALVA COM SUCESSO no Supabase Storage:', transcriptionUpload.fileUrl)

    return {
      fileId: transcriptionUpload.fileId,
      fileUrl: transcriptionUpload.fileUrl
    }

  } catch (error) {
    console.error('‚ùå Erro no salvamento REAL da transcri√ß√£o:', error)
    throw error
  }
}

// Gerar relat√≥rio final REAL + Dataset de Fine-tuning
export async function generateFinalReportAndDataset(
  userEmail: string,
  analysisData: any,
  responses: any[]
): Promise<{ 
  reportFileId: string; 
  reportFileUrl: string;
  datasetFileId: string;
  datasetFileUrl: string;
  voiceCloningData: any[];
}> {
  try {
    console.log('üìä Gerando relat√≥rio final REAL + dataset de fine-tuning...')

    if (!supabaseStorageService.isConfigured()) {
      console.error("‚ö†Ô∏è Supabase Storage n√£o configurado. A gera√ß√£o de relat√≥rio e dataset n√£o pode ser realizada.")
      throw new Error("Supabase Storage n√£o configurado.")
    }

    // 1. Gerar relat√≥rio final REAL
    console.log('üìÑ Gerando relat√≥rio final REAL...')
    const reportUpload = await supabaseStorageService.uploadFinalReport(
      userEmail,
      analysisData,
      responses
    )

    // 2. Gerar dataset de fine-tuning REAL para TinyLlama
    console.log('ü§ñ Gerando dataset de fine-tuning REAL...')
    const dataset = FineTuningDatasetGenerator.generateDataset(
      userEmail,
      responses,
      analysisData
    )

    const datasetUpload = await supabaseStorageService.uploadFineTuningDataset(
      dataset,
      userEmail
    )

    // 3. Preparar dados REAIS para clonagem de voz
    console.log('üé§ Preparando dados REAIS para clonagem de voz...')
    const voiceCloningData = FineTuningDatasetGenerator.generateVoiceCloningData(responses)

    console.log('‚úÖ Relat√≥rio e dataset REAIS gerados com sucesso!')
    console.log(`üìä Relat√≥rio: ${reportUpload.fileUrl}`)
    console.log(`ü§ñ Dataset: ${datasetUpload.fileUrl}`)
    console.log(`üé§ Dados de voz: ${voiceCloningData.length} arquivos preparados`)

    return {
      reportFileId: reportUpload.fileId,
      reportFileUrl: reportUpload.fileUrl,
      datasetFileId: datasetUpload.fileId,
      datasetFileUrl: datasetUpload.fileUrl,
      voiceCloningData: voiceCloningData
    }

  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio e dataset REAIS:', error)
    throw error
  }
}

