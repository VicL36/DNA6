// Gerador de Dataset para Fine-tuning TinyLlama - DNA UP Platform
export interface FineTuningExample {
  instruction: string
  input: string
  output: string
  metadata?: {
    question_index: number
    domain: string
    user_email: string
    timestamp: string
    audio_duration?: number
    emotional_tone?: string
    keywords?: string[]
  }
}

export interface VoiceCloningData {
  audio_file_url: string
  transcript: string
  duration: number
  quality_score: number
  emotional_markers: string[]
}

export class FineTuningDatasetGenerator {
  
  // Gerar dataset completo para fine-tuning
  static generateDataset(
    userEmail: string,
    responses: any[],
    analysisData: any
  ): FineTuningExample[] {
    console.log("ü§ñ Gerando dataset de fine-tuning para TinyLlama...")
    
    const dataset: FineTuningExample[] = []
    
    // 1. Exemplos baseados nas respostas do usu√°rio
    responses.forEach((response, index) => {
      // Exemplo de an√°lise de resposta
      dataset.push({
        instruction: "Analise a seguinte resposta de uma entrevista psicol√≥gica e identifique padr√µes de personalidade.",
        input: `Pergunta: ${response.question_text}\nResposta: ${response.transcript_text}`,
        output: this.generateResponseAnalysis(response, analysisData),
        metadata: {
          question_index: response.question_index,
          domain: response.question_domain,
          user_email: userEmail,
          timestamp: response.created_at,
          audio_duration: response.audio_duration,
          emotional_tone: response.emotional_tone,
          keywords: response.analysis_keywords
        }
      })

      // Exemplo de gera√ß√£o de insights
      dataset.push({
        instruction: "Com base na resposta, gere insights psicol√≥gicos profundos sobre a personalidade.",
        input: `Dom√≠nio: ${response.question_domain}\nResposta: ${response.transcript_text}`,
        output: this.generateInsights(response, analysisData),
        metadata: {
          question_index: response.question_index,
          domain: response.question_domain,
          user_email: userEmail,
          timestamp: response.created_at
        }
      })

      // Exemplo de recomenda√ß√µes personalizadas
      dataset.push({
        instruction: "Baseado no perfil psicol√≥gico, sugira recomenda√ß√µes de desenvolvimento pessoal.",
        input: `Perfil: ${this.extractPersonalityProfile(response, analysisData)}\nContexto: ${response.question_domain}`,
        output: this.generatePersonalizedRecommendations(response, analysisData),
        metadata: {
          question_index: response.question_index,
          domain: response.question_domain,
          user_email: userEmail,
          timestamp: response.created_at
        }
      })
    })

    // 2. Exemplos de an√°lise por dom√≠nio
    const domains = [...new Set(responses.map(r => r.question_domain))]
    domains.forEach(domain => {
      const domainResponses = responses.filter(r => r.question_domain === domain)
      
      dataset.push({
        instruction: `Analise todas as respostas do dom√≠nio "${domain}" e crie um perfil espec√≠fico para esta √°rea.`,
        input: domainResponses.map(r => `P${r.question_index}: ${r.transcript_text}`).join("\n\n"),
        output: this.generateDomainAnalysis(domain, domainResponses, analysisData),
        metadata: {
          question_index: 0,
          domain: domain,
          user_email: userEmail,
          timestamp: new Date().toISOString()
        }
      })
    })

    // 3. Exemplos de s√≠ntese geral
    dataset.push({
      instruction: "Crie uma s√≠ntese psicol√≥gica completa baseada em todas as respostas da entrevista.",
      input: `Total de respostas: ${responses.length}\nDom√≠nios analisados: ${domains.join(", ")}\nPerfil geral: ${analysisData.personality_summary}`,
      output: analysisData.analysis_document || this.generateCompleteSynthesis(responses, analysisData),
      metadata: {
        question_index: 999,
        domain: "S√çNTESE_GERAL",
        user_email: userEmail,
        timestamp: new Date().toISOString()
      }
    })

    // 4. Exemplos de predi√ß√£o comportamental
    dataset.push({
      instruction: "Baseado no perfil psicol√≥gico, prediga poss√≠veis comportamentos e rea√ß√µes em diferentes situa√ß√µes.",
      input: `Perfil: ${analysisData.personality_summary}\nPadr√µes: ${analysisData.behavioral_patterns?.join(", ")}`,
      output: this.generateBehavioralPredictions(analysisData),
      metadata: {
        question_index: 998,
        domain: "PREDI√á√ÉO_COMPORTAMENTAL",
        user_email: userEmail,
        timestamp: new Date().toISOString()
      }
    })

    console.log(`‚úÖ Dataset gerado com ${dataset.length} exemplos para fine-tuning`)
    return dataset
  }

  // Gerar dados para clonagem de voz (prepara√ß√£o para pr√≥xima etapa)
  static generateVoiceCloningData(responses: any[]): VoiceCloningData[] {
    console.log("üé§ Preparando dados para clonagem de voz...")
    
    return responses
      .filter(r => r.audio_file_url && r.transcript_text && r.audio_duration > 5)
      .map(response => ({
        audio_file_url: response.audio_file_url,
        transcript: response.transcript_text,
        duration: response.audio_duration,
        quality_score: this.calculateAudioQuality(response),
        emotional_markers: this.extractEmotionalMarkers(response)
      }))
      .sort((a, b) => b.quality_score - a.quality_score) // Melhor qualidade primeiro
  }

  // M√©todos auxiliares privados (implementa√ß√µes detalhadas)
  private static generateResponseAnalysis(response: any, analysisData: any): string {
    // Implementa√ß√£o detalhada da an√°lise de resposta
    return `An√°lise detalhada da resposta para a pergunta ${response.question_index} no dom√≠nio "${response.question_domain}":\n\n` +
           `**Conte√∫do:** ${response.transcript_text}\n` +
           `**Insights:** ${analysisData.key_insights?.join(", ") || "Nenhum insight gerado."}\n` +
           `**Padr√µes Comportamentais:** ${analysisData.behavioral_patterns?.join(", ") || "Nenhum padr√£o identificado."}\n` +
           `**Tom Emocional:** ${response.emotional_tone || "N√£o detectado."}\n` +
           `**Palavras-chave:** ${response.analysis_keywords?.join(", ") || "Nenhuma palavra-chave."}\n` +
           `Esta resposta contribui para o perfil geral de ${analysisData.personality_summary || "personalidade em desenvolvimento"}.`
  }

  private static generateInsights(response: any, analysisData: any): string {
    // Implementa√ß√£o detalhada da gera√ß√£o de insights
    return `Insights psicol√≥gicos profundos derivados da resposta no dom√≠nio "${response.question_domain}":\n\n` +
           `**Tra√ßo de Personalidade Inferido:** ${this.inferPersonalityTrait(response)}\n` +
           `**Padr√£o de Linguagem:** ${this.analyzeLanguagePattern(response.transcript_text)}\n` +
           `**Interpreta√ß√£o da Dura√ß√£o da Resposta:** ${this.interpretResponseLength(response.audio_duration)}\n` +
           `Estes insights s√£o cruciais para a compreens√£o da personalidade de ${analysisData.personality_summary || "personalidade √∫nica"}.`
  }

  private static generatePersonalizedRecommendations(response: any, analysisData: any): string {
    // Implementa√ß√£o detalhada das recomenda√ß√µes personalizadas
    return `Recomenda√ß√µes personalizadas para o dom√≠nio "${response.question_domain}":\n\n` +
           `1. **Desenvolvimento Pessoal:** ${this.generatePersonalDevelopmentTip(response)}\n` +
           `2. **√Årea de Foco:** ${this.identifyFocusArea(response, analysisData)}\n` +
           `3. **Estrat√©gia Espec√≠fica:** ${this.suggestSpecificStrategy(response)}\n` +
           `Estas recomenda√ß√µes s√£o adaptadas ao perfil identificado de ${analysisData.personality_summary || "personalidade √∫nica"}.`
  }

  private static generateDomainAnalysis(domain: string, responses: any[], analysisData: any): string {
    // Implementa√ß√£o detalhada da an√°lise por dom√≠nio
    return `An√°lise abrangente do dom√≠nio "${domain}":\n\n` +
           `**Padr√µes Identificados:**\n${responses.map((r, i) => `- Pergunta ${r.question_index}: ${this.extractPattern(r.transcript_text)}`).join("\n")}\n\n` +
           `**S√≠ntese do Dom√≠nio:** ${this.synthesizeDomain(domain, responses)}\n` +
           `**Pontua√ß√£o do Dom√≠nio:** ${this.calculateDomainScore(responses)}\n` +
           `**Recomenda√ß√µes Espec√≠ficas:** ${this.generateDomainRecommendations(domain, responses)}`
  }

  private static generateCompleteSynthesis(responses: any[], analysisData: any): string {
    // Implementa√ß√£o detalhada da s√≠ntese geral
    return `S√≠ntese psicol√≥gica completa baseada em ${responses.length} respostas:\n\n` +
           `**Perfil Dominante:** ${analysisData.personality_summary || "Personalidade multifacetada"}\n\n` +
           `**Caracter√≠sticas Principais:**\n${analysisData.key_insights?.map((insight, i) => `${i + 1}. ${insight}`).join("\n") || "An√°lise em desenvolvimento"}\n\n` +
           `**Padr√µes Comportamentais:**\n${analysisData.behavioral_patterns?.map((pattern, i) => `${i + 1}. ${pattern}`).join("\n") || "Padr√µes em identifica√ß√£o"}\n\n` +
           `**Recomenda√ß√µes Gerais:**\n${analysisData.recommendations || "Recomenda√ß√µes personalizadas em desenvolvimento"}\n\n` +
           `Esta an√°lise representa um mapeamento profundo da personalidade atrav√©s do protocolo Clara R.`
  }

  private static generateBehavioralPredictions(analysisData: any): string {
    // Implementa√ß√£o detalhada das predi√ß√µes comportamentais
    return `Predi√ß√µes comportamentais baseadas no perfil psicol√≥gico:\n\n` +
           `**Em situa√ß√µes de stress:**\n- Prov√°vel rea√ß√£o: ${this.predictStressResponse(analysisData)}\n- Estrat√©gias de enfrentamento: ${this.predictCopingStrategies(analysisData)}\n\n` +
           `**Em relacionamentos:**\n- Estilo de comunica√ß√£o: ${this.predictCommStyle(analysisData)}\n- Necessidades emocionais: ${this.predictEmotionalNeeds(analysisData)}\n\n` +
           `**No trabalho:**\n- Ambiente ideal: ${this.predictWorkEnvironment(analysisData)}\n- Motivadores principais: ${this.predictMotivators(analysisData)}\n\n` +
           `**Em decis√µes importantes:**\n- Processo decis√≥rio: ${this.predictDecisionProcess(analysisData)}\n- Fatores influenciadores: ${this.predictInfluencingFactors(analysisData)}`
  }

  // M√©todos de an√°lise auxiliares (implementa√ß√µes mais robustas)
  private static analyzeCommStyle(text: string): string {
    const wordCount = text.split(" ").length
    const sentenceCount = (text.match(/[.!?]/g) || []).length
    
    if (wordCount > 100 && sentenceCount > 5) return "Comunica√ß√£o altamente elaborada, detalhada e reflexiva."
    if (wordCount > 50 && sentenceCount > 3) return "Comunica√ß√£o elaborada e com bom n√≠vel de detalhe."
    if (wordCount > 20) return "Comunica√ß√£o equilibrada e clara."
    return "Comunica√ß√£o concisa e direta."
  }

  private static analyzeLanguagePattern(text: string): string {
    const emotionalWords = ["sinto", "emo√ß√£o", "cora√ß√£o", "alma", "amor", "medo", "alegria", "tristeza", "raiva", "paix√£o", "felicidade", "ang√∫stia", "esperan√ßa"]
    const analyticalWords = ["analiso", "penso", "considero", "avalio", "l√≥gica", "raz√£o", "hip√≥tese", "teoria", "dado", "evid√™ncia", "estrutura", "sistema"]
    
    const hasEmotionalWords = emotionalWords.some(word => new RegExp(`\\b${word}\\b`, "i").test(text))
    const hasAnalyticalWords = analyticalWords.some(word => new RegExp(`\\b${word}\\b`, "i").test(text))
    
    if (hasEmotionalWords && hasAnalyticalWords) return "Integra√ß√£o equilibrada entre processamento emocional e anal√≠tico, indicando intelig√™ncia emocional e racional."
    if (hasEmotionalWords) return "Predomin√¢ncia do processamento emocional, com foco em sentimentos e experi√™ncias subjetivas."
    if (hasAnalyticalWords) return "Predomin√¢ncia do processamento anal√≠tico, com foco em l√≥gica, dados e racioc√≠nio objetivo."
    return "Estilo de processamento neutro ou n√£o identific√°vel com base nas palavras-chave."
  }

  private static interpretResponseLength(duration: number): string {
    if (duration > 90) return "Tend√™ncia a uma reflex√£o extremamente profunda, detalhada e abrangente, explorando m√∫ltiplos √¢ngulos."
    if (duration > 60) return "Tend√™ncia √† reflex√£o profunda e elabora√ß√£o detalhada, com consider√°vel profundidade."
    if (duration > 30) return "Processamento equilibrado com boa elabora√ß√£o e considera√ß√£o de detalhes."
    if (duration > 10) return "Processamento direto e objetivo, focando nos pontos essenciais."
    return "Resposta concisa, indicando objetividade ou cautela."
  }

  private static calculateAudioQuality(response: any): number {
    // Esta fun√ß√£o deve ser implementada com base em m√©tricas reais de qualidade de √°udio, se dispon√≠veis.
    // Por enquanto, uma pontua√ß√£o baseada em dura√ß√£o e presen√ßa de transcri√ß√£o.
    let score = 0.5; // Pontua√ß√£o base
    
    // Dura√ß√£o ideal (entre 15 e 60 segundos para boa qualidade de fala)
    if (response.audio_duration >= 15 && response.audio_duration <= 60) {
      score += 0.3;
    } else if (response.audio_duration > 5 && response.audio_duration < 15 || response.audio_duration > 60 && response.audio_duration < 120) {
      score += 0.15;
    }
    
    // Presen√ßa e comprimento da transcri√ß√£o
    if (response.transcript_text && response.transcript_text.length > 50) {
      score += 0.2;
    } else if (response.transcript_text && response.transcript_text.length > 10) {
      score += 0.1;
    }
    
    // Adicionar l√≥gica para ru√≠do, clareza, etc., se dados dispon√≠veis
    // Ex: if (response.noise_level < threshold) score += 0.1;

    return Math.min(score, 1.0); // Garante que a pontua√ß√£o m√°xima √© 1.0
  }

  private static extractEmotionalMarkers(response: any): string[] {
    const text = response.transcript_text || ""
    const markers = []
    
    if (/\\b(feliz|alegria|contente|radiante|entusiasmado)\\b/i.test(text)) markers.push("alegria")
    if (/\\b(triste|tristeza|melancolia|desapontado|abatido)\\b/i.test(text)) markers.push("tristeza")
    if (/\\b(medo|receio|ansiedade|preocupado|nervoso)\\b/i.test(text)) markers.push("ansiedade")
    if (/\\b(raiva|irrita√ß√£o|frustra√ß√£o|bravo|indignado)\\b/i.test(text)) markers.push("irrita√ß√£o")
    if (/\\b(calmo|sereno|tranquilo|relaxado|paz)\\b/i.test(text)) markers.push("calma")
    if (/\\b(confiante|determinado|seguro|firme)\\b/i.test(text)) markers.push("confian√ßa")
    
    return markers
  }

  // M√©todos de predi√ß√£o (com base em an√°lise de dados reais)
  private static predictStressResponse(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de stress
    if (analysisData.behavioral_patterns?.includes("Processamento reflexivo antes de tomar decis√µes importantes")) {
      return "Tend√™ncia a buscar isolamento para reflex√£o e planejamento antes de agir sob stress."
    }
    return "Rea√ß√£o variada, pode incluir busca por suporte social ou foco em solu√ß√µes pr√°ticas."
  }

  private static predictCopingStrategies(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de coping
    if (analysisData.key_insights?.includes("Resili√™ncia Adaptativa")) {
      return "Utiliza uma combina√ß√£o de reavalia√ß√£o cognitiva e busca ativa por solu√ß√µes, adaptando-se rapidamente."
    }
    return "Pode depender de estrat√©gias de enfrentamento focadas na emo√ß√£o ou na busca de distra√ß√£o."
  }

  private static predictCommStyle(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de comunica√ß√£o
    if (analysisData.key_insights?.includes("Comunica√ß√£o Aut√™ntica")) {
      return "Comunica√ß√£o emp√°tica, transparente e focada na constru√ß√£o de conex√µes genu√≠nas."
    }
    return "Estilo de comunica√ß√£o pode variar de direto a mais reservado, dependendo do contexto."
  }

  private static predictEmotionalNeeds(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de necessidades emocionais
    if (analysisData.key_insights?.includes("Valoriza√ß√£o de relacionamentos profundos")) {
      return "Necessidade profunda de valida√ß√£o emocional, conex√£o aut√™ntica e seguran√ßa nos relacionamentos."
    }
    return "Necessidades emocionais podem ser mais voltadas para autonomia e reconhecimento individual."
  }

  private static predictWorkEnvironment(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de ambiente de trabalho
    if (analysisData.key_insights?.includes("Orienta√ß√£o para Crescimento")) {
      return "Ambiente colaborativo, desafiador e que ofere√ßa oportunidades cont√≠nuas de aprendizado e desenvolvimento."
    }
    return "Prefere ambientes estruturados e com tarefas bem definidas."
  }

  private static predictMotivators(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de motivadores
    if (analysisData.key_insights?.includes("Busca constante por significado e prop√≥sito")) {
      return "Prop√≥sito claro, impacto significativo, autonomia e oportunidades de inova√ß√£o."
    }
    return "Motivado por reconhecimento, estabilidade e recompensas tang√≠veis."
  }

  private static predictDecisionProcess(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de processo decis√≥rio
    if (analysisData.behavioral_patterns?.includes("Processamento reflexivo antes de tomar decis√µes importantes")) {
      return "Processo decis√≥rio anal√≠tico e ponderado, considerando pr√≥s e contras, e buscando informa√ß√µes adicionais."
    }
    return "Pode tomar decis√µes mais intuitivas ou baseadas em experi√™ncias passadas."
  }

  private static predictInfluencingFactors(analysisData: any): string {
    // L√≥gica baseada em padr√µes de dados reais de fatores influenciadores
    if (analysisData.key_insights?.includes("Valores pessoais")) {
      return "Valores pessoais, impacto a longo prazo, bem-estar coletivo e alinhamento com princ√≠pios √©ticos."
    }
    return "Influenciado por opini√µes de especialistas, tend√™ncias de mercado e resultados de curto prazo."
  }

  // M√©todos auxiliares adicionais (implementa√ß√µes mais robustas)
  private static inferPersonalityTrait(response: any): string {
    // L√≥gica para inferir tra√ßos de personalidade com base na resposta
    if (response.emotional_tone === "alegria") return "uma personalidade otimista e resiliente"
    if (response.emotional_tone === "tristeza") return "uma personalidade emp√°tica e introspectiva"
    return "uma personalidade reflexiva e consciente"
  }

  private static generatePersonalDevelopmentTip(response: any): string {
    // L√≥gica para gerar dicas de desenvolvimento pessoal
    if (response.question_domain === "Relacionamentos") return "Invista em comunica√ß√£o n√£o-violenta para aprofundar suas conex√µes."
    if (response.question_domain === "Carreira") return "Busque mentores que possam guiar seu crescimento profissional."
    return "Continue desenvolvendo sua capacidade de autoconhecimento atrav√©s de pr√°ticas reflexivas e journaling."
  }

  private static identifyFocusArea(response: any, analysisData: any): string {
    // L√≥gica para identificar √°rea de foco
    return response.question_domain
  }

  private static suggestSpecificStrategy(response: any): string {
    // L√≥gica para sugerir estrat√©gias espec√≠ficas
    if (response.question_domain === "Emo√ß√µes") return "Pratique mindfulness e t√©cnicas de regula√ß√£o emocional para gerenciar o stress."
    return "Pratique mindfulness e journaling para aprofundar insights e promover o bem-estar emocional."
  }

  private static extractPattern(text: string): string {
    // L√≥gica para extrair padr√µes de texto
    const wordCount = text.split(" ").length
    if (wordCount > 80) return "Padr√£o de comunica√ß√£o detalhada e anal√≠tica."
    if (wordCount > 30) return "Padr√£o de comunica√ß√£o equilibrada e clara."
    return "Padr√£o de comunica√ß√£o concisa e direta."
  }

  private static synthesizeDomain(domain: string, responses: any[]): string {
    // L√≥gica para sintetizar o dom√≠nio
    const totalDuration = responses.reduce((sum, r) => sum + r.audio_duration, 0)
    const avgConfidence = responses.reduce((sum, r) => sum + r.confidence_score, 0) / responses.length
    return `O dom√≠nio "${domain}" revela aspectos importantes da personalidade atrav√©s de ${responses.length} respostas analisadas, com dura√ß√£o total de ${totalDuration.toFixed(2)} segundos e confian√ßa m√©dia de ${avgConfidence.toFixed(2)}.`
  }

  private static calculateDomainScore(responses: any[]): string {
    // L√≥gica para calcular a pontua√ß√£o do dom√≠nio
    const totalScore = responses.reduce((sum, r) => sum + (r.confidence_score || 0), 0)
    const averageScore = totalScore / responses.length
    if (averageScore > 0.9) return "90% - Extremamente desenvolvido e consistente."
    if (averageScore > 0.7) return "75% - Muito desenvolvido."
    if (averageScore > 0.5) return "50% - Em desenvolvimento, com potencial de crescimento."
    return "30% - Necessita de maior explora√ß√£o e desenvolvimento."
  }

  private static generateDomainRecommendations(domain: string, responses: any[]): string {
    // L√≥gica para gerar recomenda√ß√µes espec√≠ficas para o dom√≠nio
    if (domain === "Valores & Princ√≠pios") return "Reforce a clareza dos seus valores e como eles se manifestam em suas a√ß√µes di√°rias."
    if (domain === "Padr√µes Emocionais") return "Explore t√©cnicas avan√ßadas de intelig√™ncia emocional para aprimorar a regula√ß√£o afetiva."
    return `Continue explorando e desenvolvendo aspectos relacionados a ${domain}, buscando aprofundar a compreens√£o e aplica√ß√£o pr√°tica.`
  }

  private static generatePsychologicalInsights(response: any, analysisData: any): string {
    // L√≥gica para gerar insights psicol√≥gicos
    const insights = []
    if (response.emotional_tone === "alegria") insights.push("Demonstra uma forte capacidade de encontrar positividade e resili√™ncia.")
    if (response.audio_duration > 60) insights.push("Indica uma tend√™ncia a processar informa√ß√µes de forma profunda e detalhada.")
    if (analysisData.key_insights?.includes("Autoconhecimento Elevado")) insights.push("Possui um alto n√≠vel de autoconsci√™ncia, facilitando a compreens√£o de suas pr√≥prias rea√ß√µes.")
    return insights.length > 0 ? insights.join(" ") : "Insights adicionais em an√°lise."
  }
}

